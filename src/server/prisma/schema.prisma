// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../../types/schema-types"
  useMultipleFiles = false
}

model User {
  id                    String                  @id @map("_id")
  name                  String
  email                 String
  emailVerified         Boolean
  image                 String?
  createdAt             DateTime
  updatedAt             DateTime
  twoFactorEnabled      Boolean?
  role                  String?
  banned                Boolean?
  banReason             String?
  banExpires            DateTime?
  sessions              Session[]
  accounts              Account[]
  members               Member[]
  invitations           Invitation[]
  twofactors            TwoFactor[]
  children              Child[] // Added this relation
  sentNotifications     Notification[]          @relation("SentNotifications") // Added relation for sent notifications
  receivedNotifications NotificationRecipient[] // Added relation for received notifications

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id @map("_id")
  expiresAt            DateTime
  token                String
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?
  impersonatedBy       String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id             String          @id @map("_id")
  name           String
  slug           String?
  logo           String?
  createdAt      DateTime
  metadata       String?
  members        Member[]
  invitations    Invitation[]
  nurseryDetails NurseryDetails?
  classes        Class[]
  children       Child[]
  payments       Payment[] // Add this relation to Organization model

  @@unique([slug])
  @@map("organization")
}

model Member {
  id              String          @id @map("_id")
  organizationId  String
  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  role            String
  createdAt       DateTime
  teachingClasses Class[]
  ChildFeedback   ChildFeedback[]
  payments        Payment[]
  lessonPlans     LessonPlan[]

  @@map("member")
}

model Invitation {
  id             String       @id @map("_id")
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model TwoFactor {
  id          String @id @map("_id")
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model Tasks {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String
  done Boolean @default(false)
}

model BankDetails {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  bankName          String
  accountHolderName String
  accountNumber     String
  swiftCode         String
  currency          String
  branch            String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  nurseryDetails    NurseryDetails? @relation(fields: [nurseryDetailsId], references: [id])
  nurseryDetailsId  String?         @unique @db.ObjectId

  @@map("bankDetails")
}

model NurseryDetails {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  address             String?
  phoneNumber         String?
  email               String?
  themePrimaryColor   String?
  themeSecondaryColor String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  organizationId      String       @unique
  organization        Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  bankDetails         BankDetails?

  @@map("nurseryDetails")
}

model Class {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  teacherId      String
  teacher        Member       @relation(fields: [teacherId], references: [id])
  children       ChildClass[]
  lessonPlans    LessonPlan[]

  @@map("class")
}

model Child {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  dateOfBirth DateTime
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  classes     ChildClass[]
  parentId    String // Now references User.id
  parent      User            @relation(fields: [parentId], references: [id])
  nurseryId   String // Now references Organization.id
  nursery     Organization    @relation(fields: [nurseryId], references: [id])
  badges      ChildBadge[] // Added relation to badges
  feedbacks   ChildFeedback[] // Added relation to feedbacks

  @@map("child")
}

model ChildClass {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  childId  String   @db.ObjectId
  child    Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  classId  String   @db.ObjectId
  class    Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  joinedAt DateTime @default(now())

  @@unique([childId, classId])
  @@map("childClass")
}

// New Badge model
model Badge {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  imageUrl    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  children    ChildBadge[]

  @@map("badge")
}

// Junction table for Child and Badge (many-to-many)
model ChildBadge {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  childId   String   @db.ObjectId
  child     Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  badgeId   String   @db.ObjectId
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  awardedAt DateTime @default(now())

  @@unique([childId, badgeId])
  @@map("childBadge")
}

// Feedback model for children
model ChildFeedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  rating    Int?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  childId   String   @db.ObjectId
  child     Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  teacherId String // References the Member who provided the feedback
  teacher   Member   @relation(fields: [teacherId], references: [id])

  @@map("childFeedback")
}

// Payment model for tracking payments from members to organizations
model Payment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  amount        Float?
  currency      String?
  status        String? // e.g., "pending", "completed", "failed"
  paymentMethod String? // e.g., "credit_card", "bank_transfer"
  description   String?
  paymentDate   DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  receiptURL    String?

  // Relations
  memberId String
  member   Member @relation(fields: [memberId], references: [id])

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("payment")
}

// New NotificationTag model
model NotificationTag {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  createdAt     DateTime                       @default(now())
  updatedAt     DateTime                       @updatedAt
  notifications NotificationTag_Notification[]

  @@unique([name])
  @@map("notificationTag")
}

// New Notification model
model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  image     String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Sender relation
  senderId String
  sender   User   @relation("SentNotifications", fields: [senderId], references: [id], onDelete: Cascade)

  // Recipients relation
  recipients NotificationRecipient[]

  // Tags relation
  tags NotificationTag_Notification[]

  @@map("notification")
}

// Junction table for Notification and NotificationTag (many-to-many)
model NotificationTag_Notification {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  notificationId    String          @db.ObjectId
  notification      Notification    @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationTagId String          @db.ObjectId
  notificationTag   NotificationTag @relation(fields: [notificationTagId], references: [id], onDelete: Cascade)

  @@unique([notificationId, notificationTagId])
  @@map("notificationTag_Notification")
}

// Junction table for Notification and User recipients (many-to-many)
model NotificationRecipient {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  notificationId String       @db.ObjectId
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  recipientId    String
  recipient      User         @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  readAt         DateTime? // To track when a specific recipient read the notification

  @@unique([notificationId, recipientId])
  @@map("notificationRecipient")
}

model LessonPlan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  thumbnail   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to the teacher who created it
  teacherId String
  teacher   Member @relation(fields: [teacherId], references: [id])

  // Relation to the class it belongs to
  classId String @db.ObjectId
  class   Class  @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@map("lessonPlan")
}
