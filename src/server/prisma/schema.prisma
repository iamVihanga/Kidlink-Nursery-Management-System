// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../../types/schema-types"
  useMultipleFiles = false
}

model User {
  id               String       @id @map("_id")
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  twoFactorEnabled Boolean?
  role             String?
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  sessions         Session[]
  accounts         Account[]
  members          Member[]
  invitations      Invitation[]
  twofactors       TwoFactor[]
  children         Child[] // Added this relation

  @@unique([email])
  @@map("user")
}

model Session {
  id                   String   @id @map("_id")
  expiresAt            DateTime
  token                String
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?
  impersonatedBy       String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id             String          @id @map("_id")
  name           String
  slug           String?
  logo           String?
  createdAt      DateTime
  metadata       String?
  members        Member[]
  invitations    Invitation[]
  nurseryDetails NurseryDetails?
  classes        Class[]
  children       Child[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id              String       @id @map("_id")
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role            String
  createdAt       DateTime
  teachingClasses Class[]

  @@map("member")
}

model Invitation {
  id             String       @id @map("_id")
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model TwoFactor {
  id          String @id @map("_id")
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model Tasks {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String
  done Boolean @default(false)
}

model BankDetails {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  bankName          String
  accountHolderName String
  accountNumber     String
  swiftCode         String
  currency          String
  branch            String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  nurseryDetails    NurseryDetails? @relation(fields: [nurseryDetailsId], references: [id])
  nurseryDetailsId  String?         @unique @db.ObjectId

  @@map("bankDetails")
}

model NurseryDetails {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  address             String?
  phoneNumber         String?
  email               String?
  themePrimaryColor   String?
  themeSecondaryColor String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  organizationId      String       @unique
  organization        Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  bankDetails         BankDetails?

  @@map("nurseryDetails")
}

model Class {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  teacherId      String
  teacher        Member       @relation(fields: [teacherId], references: [id])
  children       ChildClass[]

  @@map("class")
}

model Child {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  dateOfBirth DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  classes     ChildClass[]
  parentId    String // Now references User.id
  parent      User         @relation(fields: [parentId], references: [id])
  nurseryId   String // Now references Organization.id
  nursery     Organization @relation(fields: [nurseryId], references: [id])

  @@map("child")
}

model ChildClass {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  childId  String   @db.ObjectId
  child    Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  classId  String   @db.ObjectId
  class    Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  joinedAt DateTime @default(now())

  @@unique([childId, classId])
  @@map("childClass")
}
